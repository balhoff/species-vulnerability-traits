package org.nescent.informatics.eol

import scala.collection.JavaConversions._
import org.apache.commons.csv.CSVFormat
import java.io.BufferedReader
import java.io.FileReader
import java.io.File
import org.apache.commons.csv.CSVRecord
import com.hp.hpl.jena.rdf.model.ModelFactory
import com.hp.hpl.jena.util.URIref
import com.hp.hpl.jena.graph.NodeFactory
import com.hp.hpl.jena.rdf.model.ResourceFactory
import com.hp.hpl.jena.vocabulary.RDF
import com.hp.hpl.jena.vocabulary.RDFS
import java.io.BufferedOutputStream
import java.io.FileOutputStream
import org.apache.commons.lang3.StringUtils

object ConvertTraitData extends App {

  val infile = args(0)
  val outfile = args(1)
  val reader = new BufferedReader(new FileReader(new File(infile)))
  val cvs = CSVFormat.DEFAULT.withHeader("EOL page ID", "Scientific Name", "Common Name", "Measurement", "Value", "Measurement URI", "Value URI", "Units (normalized)", "Units URI (normalized)", "Raw Value (direct from source)", "Raw Units (direct from source)", "Raw Units URI (normalized)", "Supplier", "Content Partner Resource URL", "Source", "Citation", "Measurement Method", "Statistical Method")
    .parse(reader)
  val hasValue = ResourceFactory.createProperty("http://example.org/traitbank#hasValue")
  val hasUnit = ResourceFactory.createProperty("http://example.org/traitbank#hasUnit")
  val forTaxon = ResourceFactory.createProperty("http://example.org/traitbank#forTaxon")
  val model = ModelFactory.createDefaultModel
  def speciesNameToURI(name: String) = s"http://example.org/species?name=${URIref.encode(name)}"
  for (record <- cvs.getRecords.drop(1)) {
    val measurementType = model.createResource(record.get("Measurement URI")).addProperty(RDFS.label, record.get("Measurement"))
    val scientificName = record.get("Scientific Name").split(" ").take(2).mkString(" ")
    println(scientificName)
    val species = model.createResource(speciesNameToURI(scientificName)).addProperty(RDFS.label, scientificName)
    val measurementInstance = model.createResource
    measurementInstance.addProperty(RDF.`type`, measurementType)
    measurementInstance.addLiteral(hasValue, record.get("Value").toFloat)
    if (StringUtils.isNotBlank(record.get("Units URI (normalized)"))) {
      val unit = model.createResource(record.get("Units URI (normalized)")).addProperty(RDFS.label, record.get("Units (normalized)"))
      measurementInstance.addProperty(hasUnit, unit)
    }
    measurementInstance.addProperty(forTaxon, species)
  }
  val output = new BufferedOutputStream(new FileOutputStream(new File(outfile)))
  model.getWriter.write(model, output, "")
  output.close()
  reader.close()
  
}