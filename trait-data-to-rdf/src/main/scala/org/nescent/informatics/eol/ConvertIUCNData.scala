package org.nescent.informatics.eol

import scala.collection.JavaConversions._
import org.apache.commons.csv.CSVFormat
import java.io.BufferedReader
import java.io.FileReader
import java.io.File
import org.apache.commons.csv.CSVRecord
import com.hp.hpl.jena.rdf.model.ModelFactory
import com.hp.hpl.jena.util.URIref
import com.hp.hpl.jena.graph.NodeFactory
import com.hp.hpl.jena.rdf.model.ResourceFactory
import com.hp.hpl.jena.vocabulary.RDF
import com.hp.hpl.jena.vocabulary.RDFS
import java.io.BufferedOutputStream
import java.io.FileOutputStream
import org.apache.commons.lang3.StringUtils

object ConvertIUCNData extends App {

  val infile = args(0)
  val outfile = args(1)
  val reader = new BufferedReader(new FileReader(new File(infile)))
  val cvs = CSVFormat.DEFAULT.withHeader("assessment id", "taxon id", "Kingdom", "Phylum", "Class", "Order", "Family", "Species", "Category", "Criteria", "Possibly Extinct?", "Possibly Extinct in the Wild?", "Threat code", "Threat description")
    .parse(reader)
  val hasThreatCode = ResourceFactory.createProperty("http://example.org/iucn#hasThreatCode")
  val hasCriteria = ResourceFactory.createProperty("http://example.org/iucn#hasCriteria")
  val hasCategory = ResourceFactory.createProperty("http://example.org/iucn#hasCategory")
  val inGenus = ResourceFactory.createProperty("http://example.org/iucn#inGenus")
  val inFamily = ResourceFactory.createProperty("http://example.org/iucn#inFamily")
  val inOrder = ResourceFactory.createProperty("http://example.org/iucn#inOrder")
  val inClass = ResourceFactory.createProperty("http://example.org/iucn#inClass")
  val inPhylum = ResourceFactory.createProperty("http://example.org/iucn#inPhylum")
  val inKingdom = ResourceFactory.createProperty("http://example.org/iucn#inKingdom")
  val forTaxon = ResourceFactory.createProperty("http://example.org/traitbank#forTaxon")
  val model = ModelFactory.createDefaultModel
  def threatURI(code: String): String = s"http://example.org/iucn/threat/$code"
  def categoryURI(code: String): String = s"http://example.org/iucn/category/$code"
  def speciesNameToURI(name: String) = s"http://example.org/species?name=${URIref.encode(name)}"
  for (record <- cvs.getRecords.drop(1)) {
    val threatInstance = model.createResource
    val speciesName = record.get("Species")
    val species = model.createResource(speciesNameToURI(speciesName)).addProperty(RDFS.label, speciesName)
    val genusName = speciesName.split(" ")(0)
    val genus = model.createResource(speciesNameToURI(genusName)).addProperty(RDFS.label, genusName)
    species.addProperty(inGenus, genus)
    val family = model.createResource(speciesNameToURI(record.get("Family"))).addProperty(RDFS.label, record.get("Family"))
    species.addProperty(inFamily, family)
    val order = model.createResource(speciesNameToURI(record.get("Order"))).addProperty(RDFS.label, record.get("Order"))
    species.addProperty(inOrder, order)
    val classs = model.createResource(speciesNameToURI(record.get("Class"))).addProperty(RDFS.label, record.get("Class"))
    species.addProperty(inClass, classs)
    val phylum = model.createResource(speciesNameToURI(record.get("Phylum"))).addProperty(RDFS.label, record.get("Phylum"))
    species.addProperty(inPhylum, phylum)
    val kingdom = model.createResource(speciesNameToURI(record.get("Kingdom"))).addProperty(RDFS.label, record.get("Kingdom"))
    species.addProperty(inKingdom, kingdom)
    threatInstance.addProperty(forTaxon, species)
    val threat = model.createResource(threatURI(record.get("Threat code"))).addProperty(RDFS.label, record.get("Threat description"))
    threatInstance.addProperty(hasThreatCode, threat)
    if (StringUtils.isNotBlank(record.get("Criteria"))) {
      threatInstance.addProperty(hasCriteria, record.get("Criteria"))
    }
    val category = model.createResource(categoryURI(record.get("Category")))
    threatInstance.addProperty(hasCategory, category)
  }
  val output = new BufferedOutputStream(new FileOutputStream(new File(outfile)))
  model.getWriter.write(model, output, "")
  output.close()
  reader.close()

}